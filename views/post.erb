<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>PhotoAlbumChallenge</title>

  <!-- 共通CSSファイル -->
  <link rel="stylesheet" href="css/common.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Kiwi+Maru&family=Sawarabi+Gothic&display=swap" rel="stylesheet" crossorigin="anonymous">
  <link rel="shortcut icon" href="/assets/logo.png">

  <style>
    /* =========================
       post.html 独自スタイル
       ========================= */

    /* カメラ・チェキ風プレビュー */
    .camera-container {
      width: 100%;
      margin: 0 auto;
      padding: 20px;
    }
    .camera-video {
      width: 100%;
      max-width: 400px;
      background-color: #000;
    }
    .btn-group button {
      margin-right: 0.5rem;
      margin-top: 30px;
    }
    /* 隠しのファイル入力 */
    #uploadInput {
      display: none;
    }

    .photo-margin {
      padding: 40px 0;
      display: flex;
      justify-content: center;
    }

    /* 外側の白い枠（チェキ風フレーム）：比率 54:86 */
    .photo-preview {
      position: relative;
      width: 800px;
      aspect-ratio: 54 / 86;   
      background-color: #fff;
      overflow: hidden;
      border: 2px solid #ccc;
      margin: 0;
      border-radius: 4px;
    }
    .photo-inner {
      position: absolute;
      width: 85.185%;
      height: 72.093%;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -61%);
      overflow: hidden;
    }
    #cameraVideo, 
    #capturedImage {
      width: 100%;
      height: 100%;
      object-fit: cover;
      position: absolute;
      top: 0;
      left: 0;
      background-color: #000; 
    }
    .date-display,
    .theme-display {
      position: absolute;
      left: 0;
      width: 100%;
      text-align: center;
      font-size: 14px;
      color: #000;
      background: rgba(255,255,255,0.8);
      z-index: 2; 
      pointer-events: none;
    }
    .theme-select-container {
      height: 50px;
    }
    #themeSelect {
      font-family: "Sawarabi Gothic", sans-serif;
      font-size: 16px;
      height: 100%;
      padding: 0 10px;
      width: 200px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    .date-display {
      bottom: 30px;
      font-family: "Sawarabi Gothic", sans-serif;
      font-weight: bold;
      font-size: 30px;
    }
    .theme-display {
      bottom: 120px;
      font-size: 50px;
    }
  </style>
</head>
<body>
  <header class="header">
    <img src="assets/logo.png" class="header-logo" alt="Photo Album Challenge" />
    <div class="header-controls">
      <!-- チーム選択 -->
      <select id="mentorSelect">
        <option value="">自分のチーム名を選択してね！</option>
        <option value="ほのぴ">A：Abling-Abang-Abang-Aborn</option>
        <option value="キノヤ">B：キノヤとキャットクルー</option>
        <option value="あいりす">C：おでんかるぼなーら 〜 からしを添えて 〜</option>
        <option value="だーす">D：電卓界隈</option>
        <option value="ことり/ダイキチ">E：ジップザップビクトリー！！！</option>
        <option value="さぁ坊">F：満開信号機</option>
        <option value="しーぷ">G：別荘</option>
        <option value="ゆわ">H：Hydrogens6</option>
        <option value="ぎる">I：HARLIES</option>
        <option value="ひとで">J：SHERLOCKs</option>
        <option value="はーちぃ">K：大隈社月刊はーちぃ部アニメ製作所</option>
        <option value="島ちゃん">L：Uniコーン</option>
        <option value="らい">M：Mburger</option>
        <option value="まなち">N：純恋愛のナトリウム</option>
        <option value="さくこ/まるぴ">O：あぶらP</option>
        <option value="かむり">P：おさんぽ</option>
      </select>
      <button id="cameraButton" disabled>お題に挑戦！</button>
      <button id="albumButton">アルバム</button>
    </div>
  </header>

  <!-- メインコンテンツ -->
  <div class="camera-container">
    <!-- お題を選択するセレクトボックス -->
    <div class="theme-select-container">
      <label for="themeSelect">お題を選択：</label>
      <select id="themeSelect">
        <option value="0">選択してください</option>
        <option value="1">#開発の瞬間</option>
        <option value="2">#お昼の瞬間</option>
        <option value="3">#メンターの瞬間</option>
        <option value="4">#だいばーの瞬間</option>
        <option value="5">#コースの瞬間</option>
        <option value="6">#おそろいの瞬間</option>
        <option value="7">#テックな瞬間</option>
        <option value="8">#自撮りの瞬間</option>
        <option value="9">#春の瞬間</option>
        <option value="10">#隣人との瞬間</option>
      </select>
    </div>

    <!-- ボタン類 -->
    <div class="btn-group">
      <button id="switchButton">カメラ切り替え</button>
      <button id="takePhotoButton">撮影</button>
      <button id="uploadButton">アップロード</button>
      <button id="downloadButton" style="display:none;">ダウンロード</button>
      <button id="postButton" style="display:none;">投稿</button>
      <button id="retakeButton" style="display:none;">再撮影</button>
      <!-- 隠しファイル入力 -->
      <input type="file" id="uploadInput" accept="image/*">
    </div>

    <!-- チェキ風フレーム -->
    <div class="photo-margin">
      <div class="photo-preview" id="photoPreview">
        <div class="photo-inner">
          <!-- カメラ映像 -->
          <video id="cameraVideo" autoplay playsinline></video>
          <!-- 撮影後のプレビュー用画像。最初は非表示 -->
          <img crossOrigin="anonymous" id="capturedImage" alt="captured still" />
        </div>

        <!-- 撮影日 & お題表示 -->
        <div class="date-display" id="dateDisplay"></div>
        <div class="theme-display" id="themeDisplay"></div>
      </div>
    </div>
  </div>
  <!-- JavaScriptコードの一部を修正 - modern-screenshot使わずにCanvas APIで実装 -->
  <script>
    const shortCamp = "waseda"; 
    const mentorSelect = document.getElementById("mentorSelect");
    const cameraButton = document.getElementById("cameraButton");
    const albumButton = document.getElementById("albumButton");
    const corkBoard = document.getElementById("corkBoard");

    // ヘッダーに既に選択済みのチームを表示
    const savedTeam = localStorage.getItem("selectedMentor");
    if (savedTeam) {
      mentorSelect.value = savedTeam;
      cameraButton.disabled = false;
    }

    mentorSelect.addEventListener("change", () => {
      cameraButton.disabled = !mentorSelect.value;
      if (mentorSelect.value) {
        localStorage.setItem("selectedMentor", mentorSelect.value);
      } else {
        if(corkBoard) {
          corkBoard.innerHTML = "";
        }
      }
    });

    cameraButton.addEventListener("click", () => {
      localStorage.setItem("selectedCamp", shortCamp);
      window.location.href = "/post";
    });

    if(albumButton) {
      albumButton.addEventListener("click", () => {
        window.location.href = "/";
      });
    }

    let facingMode = "user";
    const cameraVideo = document.getElementById("cameraVideo");
    const capturedImage = document.getElementById("capturedImage");
    const switchButton = document.getElementById("switchButton");
    const takePhotoButton = document.getElementById("takePhotoButton");
    const uploadButton = document.getElementById("uploadButton");
    const downloadButton = document.getElementById("downloadButton");
    const postButton = document.getElementById("postButton");
    const retakeButton = document.getElementById("retakeButton");
    const dateDisplay = document.getElementById("dateDisplay");
    const themeDisplay = document.getElementById("themeDisplay");
    const themeSelect = document.getElementById("themeSelect");
    const photoPreview = document.getElementById("photoPreview");
    const uploadInput = document.getElementById("uploadInput");

    // 最終的に投稿する画像（photoPreview 全体の base64）
    let finalBase64 = "";

    function startCamera() {
      navigator.mediaDevices.getUserMedia({ video: { facingMode }, audio: false })
        .then(stream => {
          cameraVideo.srcObject = stream;
          cameraVideo.style.display = "block";
          capturedImage.style.display = "none";
        })
        .catch(err => {
          console.error("カメラ起動エラー:", err);
          alert("カメラが利用できません");
        });
    }

    function getFormattedDate() {
      const now = new Date();
      const y = now.getFullYear();
      const m = String(now.getMonth() + 1).padStart(2, '0');
      const d = String(now.getDate()).padStart(2, '0');
      return `${y}.${m}.${d}`;
    }

    window.addEventListener("DOMContentLoaded", () => {
      dateDisplay.textContent = getFormattedDate();
      themeDisplay.textContent = "";
      startCamera();

      postButton.style.display = "none";
      retakeButton.style.display = "none";
      downloadButton.style.display = "none";
    });

    themeSelect.addEventListener("change", () => {
      const val = themeSelect.value;
      const txt = themeSelect.options[themeSelect.selectedIndex].text;
      themeDisplay.textContent = (val === "0") ? "" : txt;
    });

    switchButton.addEventListener("click", () => {
      facingMode = (facingMode === "user") ? "environment" : "user";
      if(cameraVideo.srcObject) {
        cameraVideo.srcObject.getTracks().forEach(track => track.stop());
      }
      startCamera();
    });

    // --- 撮影ボタン: カメラ映像からキャプチャ（Canvas API使用） ---
    takePhotoButton.addEventListener("click", () => {
      if(themeSelect.value === "0") {
        alert("お題を選択してください");
        return;
      }
      
      try {
        // Canvas APIを使用してカメラ映像をキャプチャ
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        canvas.width = cameraVideo.videoWidth;
        canvas.height = cameraVideo.videoHeight;
        
        if (!canvas.width || !canvas.height) {
          console.error("カメラサイズ取得エラー:", cameraVideo.videoWidth, cameraVideo.videoHeight);
          alert("カメラの準備ができていません。少し待ってからもう一度お試しください。");
          return;
        }
        
        context.drawImage(cameraVideo, 0, 0, canvas.width, canvas.height);
        const dataUrl = canvas.toDataURL('image/png');
        
        console.log("カメラ画像キャプチャ成功");
        
        // プレビュー更新
        cameraVideo.style.display = "none";
        capturedImage.style.display = "block";
        capturedImage.src = dataUrl;
        
        // ボタン切り替え
        switchButton.style.display = "none";
        takePhotoButton.style.display = "none";
        postButton.style.display = "inline-block";
        retakeButton.style.display = "inline-block";
        downloadButton.style.display = "inline-block";
        finalBase64 = dataUrl;
      } catch (err) {
        console.error("カメラキャプチャエラー:", err);
        alert("撮影に失敗しました: " + err.message);
      }
    });

    // --- アップロードボタン: ファイル入力を起動 ---
    uploadButton.addEventListener("click", () => {
      uploadInput.click();
    });

    // --- アップロードされた画像をチェキ比率にクロップ ---
    uploadInput.addEventListener("change", (e) => {
      const file = e.target.files[0];
      if(!file) return;
      const reader = new FileReader();
      reader.onload = (event) => {
        const img = new Image();
        img.onload = () => {
          // クロップ処理: 目的の比率 (54/86)
          const targetRatio = 54 / 86;
          let cropX = 0, cropY = 0, cropWidth = img.naturalWidth, cropHeight = img.naturalHeight;
          const currentRatio = img.naturalWidth / img.naturalHeight;
          if(currentRatio > targetRatio) {
            // 幅が大きい場合：左右を切り取る
            cropWidth = img.naturalHeight * targetRatio;
            cropX = (img.naturalWidth - cropWidth) / 2;
          } else if(currentRatio < targetRatio) {
            // 高さが大きい場合：上下を切り取る
            cropHeight = img.naturalWidth / targetRatio;
            cropY = (img.naturalHeight - cropHeight) / 2;
          }
          // 切り抜いた画像を canvas に描画
          const canvas = document.createElement("canvas");
          canvas.width = cropWidth;
          canvas.height = cropHeight;
          const ctx = canvas.getContext("2d");
          ctx.drawImage(img, cropX, cropY, cropWidth, cropHeight, 0, 0, cropWidth, cropHeight);
          const dataUrl = canvas.toDataURL("image/png");
          // プレビュー更新
          cameraVideo.style.display = "none";
          capturedImage.style.display = "block";
          capturedImage.src = dataUrl;
          // ボタン切り替え
          switchButton.style.display = "none";
          takePhotoButton.style.display = "none";
          postButton.style.display = "inline-block";
          retakeButton.style.display = "inline-block";
          downloadButton.style.display = "inline-block";
          finalBase64 = dataUrl;
        };
        img.src = event.target.result;
      };
      reader.readAsDataURL(file);
    });

    // --- 再撮影ボタン ---
    retakeButton.addEventListener("click", () => {
      if(cameraVideo.srcObject) {
        cameraVideo.srcObject.getTracks().forEach(track => track.stop());
      }
      startCamera();
      switchButton.style.display = "inline-block";
      takePhotoButton.style.display = "inline-block";
      postButton.style.display = "none";
      retakeButton.style.display = "none";
      downloadButton.style.display = "none";
      finalBase64 = "";
    });

    // キャプチャ関数 - html2canvasに依存せずにDOMから画像を作成
    async function captureElement(element) {
      return new Promise((resolve, reject) => {
        try {
          // 1. キャンバス作成
          const canvas = document.createElement('canvas');
          const context = canvas.getContext('2d');
          
          // 高解像度化のために2倍の大きさでレンダリング
          const scale = 2;
          const rect = element.getBoundingClientRect();
          canvas.width = rect.width * scale;
          canvas.height = rect.height * scale;
          
          // 背景色を白に設定
          context.fillStyle = '#ffffff';
          context.fillRect(0, 0, canvas.width, canvas.height);
          context.scale(scale, scale);
          
          // 2. 画像と日付・テーマのテキストを描画
          const mainImage = capturedImage;
          const photoInner = document.querySelector('.photo-inner');
          const innerRect = photoInner.getBoundingClientRect();
          const offsetX = innerRect.left - rect.left;
          const offsetY = innerRect.top - rect.top;
          
          // 3. 現在のスタイル情報を取得
          const photoInnerStyle = window.getComputedStyle(photoInner);
          const photoPreviewStyle = window.getComputedStyle(photoPreview);
          
          // 4. 外枠の描画（チェキ風フレーム）
          context.fillStyle = photoPreviewStyle.backgroundColor;
          context.fillRect(0, 0, rect.width, rect.height);
          
          // 5. キャプチャした画像を描画
          if (mainImage.complete && mainImage.naturalWidth > 0) {
            context.drawImage(
              mainImage, 
              offsetX, offsetY, 
              innerRect.width, innerRect.height
            );
            
            // 6. 日付とテーマを描画
            // 日付表示
            const dateDisplayStyle = window.getComputedStyle(dateDisplay);
            context.font = dateDisplayStyle.font || '30px "Sawarabi Gothic", sans-serif';
            context.fillStyle = dateDisplayStyle.color || '#000000';
            context.textAlign = 'center';
            const dateRect = dateDisplay.getBoundingClientRect();
            const dateX = dateRect.left - rect.left + (dateRect.width / 2);
            const dateY = dateRect.top - rect.top + (dateRect.height / 2) + 15;
            context.fillText(dateDisplay.textContent, dateX, dateY);
            
            // テーマ表示
            const themeDisplayStyle = window.getComputedStyle(themeDisplay);
            context.font = themeDisplayStyle.font || '50px "Sawarabi Gothic", sans-serif';
            context.fillStyle = themeDisplayStyle.color || '#000000';
            const themeRect = themeDisplay.getBoundingClientRect();
            const themeX = themeRect.left - rect.left + (themeRect.width / 2);
            const themeY = themeRect.top - rect.top + (themeRect.height / 2) + 15;
            context.fillText(themeDisplay.textContent, themeX, themeY);
            
            // 7. 画像生成
            canvas.toBlob((blob) => {
              const reader = new FileReader();
              reader.onloadend = () => resolve(reader.result);
              reader.onerror = reject;
              reader.readAsDataURL(blob);
            }, 'image/png');
          } else {
            reject(new Error('画像が読み込まれていません'));
          }
        } catch (err) {
          console.error('キャプチャエラー:', err);
          reject(err);
        }
      });
    }

    // ダウンロードボタン: Canvas APIでキャプチャ
    downloadButton.addEventListener("click", async () => {
      try {
        console.log("ダウンロードボタンクリック - Canvasでキャプチャ試行");
        
        // 単純な方法:
        // 画像の代わりに背景にテキストを重ねた別のcanvasを作成する
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        const scale = 2; // 高解像度化
        
        // チェキサイズを維持
        const rect = photoPreview.getBoundingClientRect();
        canvas.width = rect.width * scale;
        canvas.height = rect.height * scale;
        
        // 背景色を設定（チェキの白色）
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.scale(scale, scale);
        
        // 元画像描画
        if (finalBase64) {
          const img = new Image();
          img.onload = () => {
            // photoInnerと同じ位置に画像を描画
            const photoInner = document.querySelector('.photo-inner');
            const innerRect = photoInner.getBoundingClientRect();
            const offsetX = innerRect.left - rect.left;
            const offsetY = innerRect.top - rect.top;
            
            ctx.drawImage(img, offsetX, offsetY, innerRect.width, innerRect.height);
            
            // 日付とテーマテキスト描画
            // 日付
            ctx.font = '30px "Sawarabi Gothic", sans-serif';
            ctx.fillStyle = '#000000';
            ctx.textAlign = 'center';
            const dateRect = dateDisplay.getBoundingClientRect();
            const dateX = rect.width / 2;
            const dateY = rect.height - 30;
            ctx.fillText(dateDisplay.textContent, dateX, dateY);
            
            // テーマ
            ctx.font = '50px "Sawarabi Gothic", sans-serif';
            const themeY = rect.height - 120;
            ctx.fillText(themeDisplay.textContent, rect.width / 2, themeY);
            
            // ダウンロード
            const dataUrl = canvas.toDataURL('image/png');
            const link = document.createElement('a');
            link.download = 'photo_' + Date.now() + '.png';
            link.href = dataUrl;
            link.click();
          };
          img.onerror = (err) => {
            console.error("画像読み込みエラー:", err);
            alert("画像処理に失敗しました");
          };
          img.src = capturedImage.src;
        } else {
          alert("画像がキャプチャされていません");
        }
      } catch (error) {
        console.error("画像変換エラー:", error);
        alert("ダウンロードに失敗しました: " + error.message);
      }
    });

    // 投稿ボタン: Canvas APIを利用
    postButton.addEventListener("click", async () => {
      const selectedCamp = localStorage.getItem("selectedCamp") || "waseda";
      const selectedMentor = localStorage.getItem("selectedMentor") || "共通";
      const themeId = parseInt(themeSelect.value, 10);
      
      if(!themeId) {
        alert("お題が選択されていません");
        return;
      }
      
      try {
        console.log("投稿ボタンクリック - Canvasでキャプチャ試行");
        
        // 新しいCanvasを作成してチェキ全体をレンダリング
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        const scale = 1.5; // 適切な解像度を維持
        
        // チェキサイズを維持
        const rect = photoPreview.getBoundingClientRect();
        canvas.width = rect.width * scale;
        canvas.height = rect.height * scale;
        
        // 背景色を設定（チェキの白色）
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.scale(scale, scale);
        
        // 元画像描画
        if (finalBase64) {
          const img = new Image();
          img.onload = () => {
            // photoInnerと同じ位置に画像を描画
            const photoInner = document.querySelector('.photo-inner');
            const innerRect = photoInner.getBoundingClientRect();
            const offsetX = innerRect.left - rect.left;
            const offsetY = innerRect.top - rect.top;
            
            ctx.drawImage(img, offsetX, offsetY, innerRect.width, innerRect.height);
            
            // 日付とテーマテキスト描画
            // 日付
            ctx.font = '30px "Sawarabi Gothic", sans-serif';
            ctx.fillStyle = '#000000';
            ctx.textAlign = 'center';
            const dateRect = dateDisplay.getBoundingClientRect();
            const dateX = rect.width / 2;
            const dateY = rect.height - 30;
            ctx.fillText(dateDisplay.textContent, dateX, dateY);
            
            // テーマ
            ctx.font = '50px "Sawarabi Gothic", sans-serif';
            const themeY = rect.height - 120;
            ctx.fillText(themeDisplay.textContent, rect.width / 2, themeY);
            
            // 投稿用データを取得
            const dataUrl = canvas.toDataURL('image/jpeg', 0.9);
            finalBase64 = dataUrl;
            
            // サーバーに送信
            const postData = {
              place: selectedCamp,
              name: selectedMentor,
              theme: themeId,
              img_link: finalBase64
            };
            
            fetch("https://springcamp2025.onrender.com/post", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(postData)
            })
            .then(res => {
              if(!res.ok) throw new Error("投稿失敗");
              return res.json();
            })
            .then(data => {
              console.log("投稿結果:", data);
              alert("投稿しました！");
              window.location.href = "/";
            })
            .catch(err => {
              console.error(err);
              alert("投稿に失敗しました");
            });
          };
          img.onerror = (err) => {
            console.error("画像読み込みエラー:", err);
            alert("画像処理に失敗しました");
          };
          img.src = capturedImage.src;
        } else {
          alert("画像がキャプチャされていません");
        }
      } catch (err) {
        console.error("投稿用画像生成エラー:", err);
        alert("投稿用画像の作成に失敗しました: " + err.message);
      }
    });
  </script>
</body>
</html>
