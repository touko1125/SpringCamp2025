<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>PhotoAlbumChallenge</title>

  <!-- 共通CSSファイル -->
  <link rel="stylesheet" href="css/common.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Kiwi+Maru&family=Sawarabi+Gothic&display=swap" rel="stylesheet" crossorigin="anonymous">
  <link rel="shortcut icon" href="/assets/logo.png">

  <style>
    /* =========================
       post.html 独自スタイル
       ========================= */

    /* カメラ・チェキ風プレビュー */
    .camera-container {
      width: 100%;
      margin: 0 auto;
      padding: 20px;
    }
    .camera-video {
      width: 100%;
      max-width: 400px;
      background-color: #000;
    }
    .btn-group button {
      margin-right: 0.5rem;
      margin-top: 30px;
    }

    .photo-margin {
      padding: 40px 0;
      display: flex;
      justify-content: center;
    }

    /* 外側の白い枠（チェキ風フレーム）：比率 54:86 */
    .photo-preview {
      position: relative;
      width: 800px;
      aspect-ratio: 54 / 86;   
      background-color: #fff;
      overflow: hidden;
      border: 2px solid #ccc;
      margin: 0;
      border-radius: 4px;
    }
    .photo-inner {
      position: absolute;
      width: 85.185%;
      height: 72.093%;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -61%);
      overflow: hidden;
    }
    #cameraVideo, 
    #capturedImage {
      width: 100%;
      height: 100%;
      object-fit: cover;
      position: absolute;
      top: 0;
      left: 0;
      background-color: #000; 
    }
    .date-display,
    .theme-display {
      position: absolute;
      left: 0;
      width: 100%;
      text-align: center;
      font-size: 14px;
      color: #000;
      background: rgba(255,255,255,0.8);
      z-index: 2; 
      pointer-events: none;
    }
    .theme-select-container {
      height: 50px;
    }
    #themeSelect {
      font-family: "Sawarabi Gothic", sans-serif;
      font-size: 16px;
      height: 100%;
      padding: 0 10px;
      width: 200px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    .date-display {
      bottom: 30px;
      font-family: "Sawarabi Gothic", sans-serif;
      font-weight: bold;
      font-size: 30px;
    }
    .theme-display {
      bottom: 120px;
      font-size: 50px;
    }
  </style>
</head>
<body>
  <header class="header">
    <img src="assets/logo.png" class="header-logo" alt="Photo Album Challenge" />
    <div class="header-controls">
      <!-- チーム選択 -->
      <select id="mentorSelect">
        <option value="">自分のチーム名を選択してね！</option>
        <option value="ほのぴ">A：Abling-Abang-Abang-Aborn</option>
        <option value="キノヤ">B：キノヤとキャットクルー</option>
        <option value="あいりす">C：おでんかるぼなーら 〜 からしを添えて 〜</option>
        <option value="だーす">D：電卓界隈</option>
        <option value="ことり/ダイキチ">E：ジップザップビクトリー！！！</option>
        <option value="さぁ坊">F：満開信号機</option>
        <option value="しーぷ">G：別荘</option>
        <option value="ゆわ">H：Hydrogens6</option>
        <option value="ぎる">I：HARLIES</option>
        <option value="ひとで">J：SHERLOCKs</option>
        <option value="はーちぃ">K：大隈社月刊はーちぃ部アニメ製作所</option>
        <option value="島ちゃん">L：Uniコーン</option>
        <option value="らい">M：Mburger</option>
        <option value="まなち">N：純恋愛のナトリウム</option>
        <option value="さくこ/まるぴ">O：あぶらP</option>
        <option value="かむり">P：おさんぽ</option>
      </select>
      <button id="cameraButton" disabled>お題に挑戦！</button>
      <button id="albumButton">アルバム</button>
    </div>
  </header>

  <!-- メインコンテンツ -->
  <div class="camera-container">
    <!-- お題を選択するセレクトボックス -->
    <div class="theme-select-container">
      <label for="themeSelect">お題を選択：</label>
      <select id="themeSelect">
        <option value="0">選択してください</option>
        <option value="1">#開発の瞬間</option>
        <option value="2">#お昼の瞬間</option>
        <option value="3">#メンターの瞬間</option>
        <option value="4">#だいばーの瞬間</option>
        <option value="5">#コースの瞬間</option>
        <option value="6">#おそろいの瞬間</option>
        <option value="7">#テックな瞬間</option>
        <option value="8">#自撮りの瞬間</option>
        <option value="9">#春の瞬間</option>
        <option value="10">#隣人との瞬間</option>
      </select>
    </div>

    <!-- ボタン類 -->
    <div class="btn-group">
      <button id="switchButton">カメラ切り替え</button>
      <button id="takePhotoButton">撮影</button>
      <button id="downloadButton" style="display:none;">ダウンロード</button>
      <button id="postButton" style="display:none;">投稿</button>
      <button id="retakeButton" style="display:none;">再撮影</button>
    </div>

    <!-- チェキ風フレーム -->
    <div class="photo-margin">
      <div class="photo-preview" id="photoPreview">
        <div class="photo-inner">
          <!-- カメラ映像 -->
          <video id="cameraVideo" autoplay playsinline></video>
          <!-- 撮影後のプレビュー用画像。最初は非表示 -->
          <img crossOrigin="anonymous" id="capturedImage" alt="captured still" />
        </div>

        <!-- 撮影日 & お題表示 -->
        <div class="date-display" id="dateDisplay"></div>
        <div class="theme-display" id="themeDisplay"></div>
      </div>
    </div>
  </div>
  <script>
    const shortCamp = "waseda"; 
    const mentorSelect = document.getElementById("mentorSelect");
    const cameraButton = document.getElementById("cameraButton");
    const albumButton = document.getElementById("albumButton");
    const corkBoard = document.getElementById("corkBoard");

    // ヘッダーに既に選択済みのチームを表示
    const savedTeam = localStorage.getItem("selectedMentor");
    if (savedTeam) {
      mentorSelect.value = savedTeam;
      cameraButton.disabled = false;
    }

    mentorSelect.addEventListener("change", () => {
      cameraButton.disabled = !mentorSelect.value;
      if (mentorSelect.value) {
        localStorage.setItem("selectedMentor", mentorSelect.value);
      } else {
        if(corkBoard) {
          corkBoard.innerHTML = "";
        }
      }
    });

    cameraButton.addEventListener("click", () => {
      localStorage.setItem("selectedCamp", shortCamp);
      window.location.href = "/post";
    });

    if(albumButton) {
      albumButton.addEventListener("click", () => {
        window.location.href = "/";
      });
    }

    let facingMode = "user";
    const cameraVideo = document.getElementById("cameraVideo");
    const capturedImage = document.getElementById("capturedImage");
    const switchButton = document.getElementById("switchButton");
    const takePhotoButton = document.getElementById("takePhotoButton");
    const downloadButton = document.getElementById("downloadButton");
    const postButton = document.getElementById("postButton");
    const retakeButton = document.getElementById("retakeButton");
    const dateDisplay = document.getElementById("dateDisplay");
    const themeDisplay = document.getElementById("themeDisplay");
    const themeSelect = document.getElementById("themeSelect");
    const photoPreview = document.getElementById("photoPreview");

    // 最終的に投稿する画像（photoPreview 全体の base64）
    let finalBase64 = "";

    // メモリとパフォーマンスのためにキャンバスを再利用
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d', { alpha: false }); // alphaをfalseにすることでパフォーマンス向上

    function startCamera() {
      navigator.mediaDevices.getUserMedia({ 
        video: { 
          facingMode,
          width: { ideal: 1280 }, // 高解像度を要求
          height: { ideal: 720 }
        }, 
        audio: false 
      })
      .then(stream => {
        cameraVideo.srcObject = stream;
        cameraVideo.style.display = "block";
        capturedImage.style.display = "none";
      })
      .catch(err => {
        console.error("カメラ起動エラー:", err);
        alert("カメラが利用できません");
      });
    }

    function getFormattedDate() {
      const now = new Date();
      const y = now.getFullYear();
      const m = String(now.getMonth() + 1).padStart(2, '0');
      const d = String(now.getDate()).padStart(2, '0');
      return `${y}.${m}.${d}`;
    }

    window.addEventListener("DOMContentLoaded", () => {
      dateDisplay.textContent = getFormattedDate();
      themeDisplay.textContent = "";
      startCamera();

      postButton.style.display = "none";
      retakeButton.style.display = "none";
      downloadButton.style.display = "none";
    });

    themeSelect.addEventListener("change", () => {
      const val = themeSelect.value;
      const txt = themeSelect.options[themeSelect.selectedIndex].text;
      themeDisplay.textContent = (val === "0") ? "" : txt;
    });

    switchButton.addEventListener("click", () => {
      facingMode = (facingMode === "user") ? "environment" : "user";
      if(cameraVideo.srcObject) {
        cameraVideo.srcObject.getTracks().forEach(track => track.stop());
      }
      startCamera();
    });

    // --- 撮影ボタン: カメラ映像からキャプチャ（Canvas API使用） ---
    takePhotoButton.addEventListener("click", () => {
      if(themeSelect.value === "0") {
        alert("お題を選択してください");
        return;
      }
      
      try {
        // Canvas APIを使用してカメラ映像をキャプチャ
        const videoWidth = cameraVideo.videoWidth;
        const videoHeight = cameraVideo.videoHeight;
        
        if (!videoWidth || !videoHeight) {
          console.error("カメラサイズ取得エラー:", videoWidth, videoHeight);
          alert("カメラの準備ができていません。少し待ってからもう一度お試しください。");
          return;
        }
        
        // 写真プレビューの比率に合わせてクロップ
        const targetRatio = 678 / 915; // チェキの写真部分の比率
        
        // photoInnerの寸法を取得
        const photoInner = document.querySelector('.photo-inner');
        const photoInnerRect = photoInner.getBoundingClientRect();
        
        // オリジナルの比率を計算
        const videoRatio = videoWidth / videoHeight;
        
        // ビデオのどの部分を切り取るか決定
        let srcX = 0, srcY = 0, srcWidth = videoWidth, srcHeight = videoHeight;
        
        if (videoRatio > targetRatio) {
          // ビデオが横長すぎる場合、幅を切り詰める
          srcWidth = videoHeight * targetRatio;
          srcX = (videoWidth - srcWidth) / 2; // 中央から切り取り
        } else {
          // ビデオが縦長すぎる場合、高さを切り詰める
          srcHeight = videoWidth / targetRatio;
          srcY = (videoHeight - srcHeight) / 2; // 中央から切り取り
        }
        
        // キャンバスを適切なサイズに設定
        canvas.width = photoInnerRect.width;
        canvas.height = photoInnerRect.height;
        
        // コンテキストをクリア
        ctx.fillStyle = "#000000";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // 切り取ったビデオ映像をキャンバスに描画（キャンバスいっぱいに引き伸ばす）
        ctx.drawImage(
          cameraVideo,
          srcX, srcY, srcWidth, srcHeight,
          0, 0, canvas.width, canvas.height
        );
        
        const dataUrl = canvas.toDataURL('image/jpeg', 0.95);
        
        console.log("カメラ画像キャプチャ成功 - キャンバスサイズ:", canvas.width, "x", canvas.height);
        console.log("ビデオ元サイズ:", videoWidth, "x", videoHeight);
        console.log("切り取り領域:", srcX, srcY, srcWidth, srcHeight);
        
        // プレビュー更新
        cameraVideo.style.display = "none";
        capturedImage.style.display = "block";
        capturedImage.src = dataUrl;
        capturedImage.style.width = "100%";
        capturedImage.style.height = "100%";
        capturedImage.style.objectFit = "cover"; // 追加：アスペクト比を保ちつつ要素を埋める
        
        // ボタン切り替え
        switchButton.style.display = "none";
        takePhotoButton.style.display = "none";
        postButton.style.display = "inline-block";
        retakeButton.style.display = "inline-block";
        downloadButton.style.display = "inline-block";
        finalBase64 = dataUrl;
      } catch (err) {
        console.error("カメラキャプチャエラー:", err);
        alert("撮影に失敗しました: " + err.message);
      }
    });

    // --- 再撮影ボタン ---
    retakeButton.addEventListener("click", () => {
      if(cameraVideo.srcObject) {
        cameraVideo.srcObject.getTracks().forEach(track => track.stop());
      }
      startCamera();
      switchButton.style.display = "inline-block";
      takePhotoButton.style.display = "inline-block";
      postButton.style.display = "none";
      retakeButton.style.display = "none";
      downloadButton.style.display = "none";
      finalBase64 = "";
    });

    // ダウンロード・投稿用の共通キャプチャ関数（パフォーマンス最適化版）
    async function capturePreview() {
      // チェキプレビュー全体の寸法を取得
      const rect = photoPreview.getBoundingClientRect();
      
      // キャンバスサイズ設定（高品質用）
      const scale = 2;
      canvas.width = rect.width * scale;
      canvas.height = rect.height * scale;
      
      // コンテキストをリセット
      ctx.setTransform(1, 0, 0, 1, 0, 0);
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // 高解像度化
      ctx.scale(scale, scale);
      
      // 背景（チェキフレーム）を描画
      ctx.fillStyle = '#ffffff';
      ctx.fillRect(0, 0, rect.width, rect.height);
      
      // 画像が存在するかチェック
      if (!capturedImage.complete || capturedImage.naturalWidth === 0) {
        throw new Error('画像がまだ読み込まれていません');
      }
      
      // 画像部分の位置とサイズを取得
      const photoInner = document.querySelector('.photo-inner');
      const innerRect = photoInner.getBoundingClientRect();
      const offsetX = innerRect.left - rect.left;
      const offsetY = innerRect.top - rect.top;
      
      // 画像を描画（サイズ調整してピッタリ合わせる）
      ctx.drawImage(
        capturedImage,
        0, 0, capturedImage.naturalWidth, capturedImage.naturalHeight,
        offsetX, offsetY, innerRect.width, innerRect.height
      );
      
      // 日付を描画
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      
      // 日付
      ctx.font = `bold ${30}px sans-serif`;
      ctx.fillStyle = '#000000';
      const dateX = rect.width / 2;
      const dateY = rect.height - 45;
      ctx.fillText(dateDisplay.textContent, dateX, dateY);
      
      // テーマ（存在する場合）
      if (themeDisplay.textContent) {
        ctx.font = `${50}px sans-serif`;
        const themeY = rect.height - 130;
        ctx.fillText(themeDisplay.textContent, rect.width / 2, themeY);
      }
      
      console.log('画像キャプチャ完了');
      
      // 効率化のためJPEG形式で生成
      return canvas.toDataURL('image/jpeg', 0.92);
    }

    // ダウンロードボタン: 最適化されたキャプチャ関数を使用
    downloadButton.addEventListener("click", async () => {
      try {
        downloadButton.disabled = true;
        downloadButton.textContent = "処理中...";
        
        console.time('ダウンロード画像生成');
        const dataUrl = await capturePreview();
        console.timeEnd('ダウンロード画像生成');
        
        // ダウンロードリンク作成
        const link = document.createElement('a');
        link.download = 'photo_' + Date.now() + '.jpg';
        link.href = dataUrl;
        link.click();
        
        downloadButton.disabled = false;
        downloadButton.textContent = "ダウンロード";
      } catch (error) {
        console.error("ダウンロードエラー:", error);
        alert("ダウンロードに失敗しました: " + error.message);
        downloadButton.disabled = false;
        downloadButton.textContent = "ダウンロード";
      }
    });

    // 投稿ボタン: 最適化されたキャプチャ関数を使用
    postButton.addEventListener("click", async () => {
      const selectedCamp = localStorage.getItem("selectedCamp") || "waseda";
      const selectedMentor = localStorage.getItem("selectedMentor") || "共通";
      const themeId = parseInt(themeSelect.value, 10);
      
      if(!themeId) {
        alert("お題が選択されていません");
        return;
      }
      
      try {
        postButton.disabled = true;
        postButton.textContent = "処理中...";
        
        console.time('投稿画像生成');
        const dataUrl = await capturePreview();
        console.timeEnd('投稿画像生成');
        
        finalBase64 = dataUrl;
        
        // サーバーに送信
        const postData = {
          place: selectedCamp,
          name: selectedMentor,
          theme: themeId,
          img_link: finalBase64
        };
        
        console.time('サーバー送信');
        const response = await fetch("https://springcamp2025.onrender.com/post", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(postData)
        });
        console.timeEnd('サーバー送信');
        
        if (!response.ok) {
          throw new Error(`サーバーエラー: ${response.status}`);
        }
        
        const data = await response.json();
        console.log("投稿結果:", data);
        alert("投稿しました！");
        window.location.href = "/";
      } catch (err) {
        console.error("投稿エラー:", err);
        alert("投稿に失敗しました: " + err.message);
        postButton.disabled = false;
        postButton.textContent = "投稿";
      }
    });
  </script>
</body>
</html>
